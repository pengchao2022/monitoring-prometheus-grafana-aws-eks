name: Deploy Monitoring Stack to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up kubectl
      uses: aws-actions/amazon-eks-setup-kubectl@v1
      with:
        cluster-name: ${{ env.CLUSTER_NAME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy Monitoring Stack
      run: |
        # 这里添加您的部署命令，例如：
        # helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        # helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack -n monitoring --create-namespace
        echo "Deploying monitoring stack to cluster: ${{ env.CLUSTER_NAME }}"

    - name: Wait for Ingress to be ready
      run: |
        # 等待Ingress创建完成
        timeout=300
        interval=10
        elapsed=0
        
        while [ $elapsed -lt $timeout ]; do
          if kubectl get ingress -n monitoring &>/dev/null; then
            echo "Ingress is ready!"
            break
          fi
          echo "Waiting for ingress to be ready... ($elapsed seconds)"
          sleep $interval
          elapsed=$((elapsed + interval))
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "Timeout waiting for ingress"
          exit 1
        fi

    - name: Get ELB Address
      id: get_elb
      run: |
        # 等待一段时间确保ALB完全配置
        sleep 60
        
        # 获取ELB地址
        ELB_ADDRESS=$(kubectl get ingress -n monitoring -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
        
        # 检查是否获取到地址
        if [ -z "$ELB_ADDRESS" ]; then
          echo "ERROR: Could not retrieve ELB address"
          echo "Checking available ingresses:"
          kubectl get ingress -n monitoring -o wide
          exit 1
        fi
        
        echo "ELB_ADDRESS=$ELB_ADDRESS" >> $GITHUB_OUTPUT
        echo "Full ELB Address: $ELB_ADDRESS"

    - name: Output URLs
      run: |
        echo "=========================================="
        echo "🚀 Monitoring Stack Deployment Complete!"
        echo "=========================================="
        echo ""
        echo "EKS Cluster: ${{ env.CLUSTER_NAME }}"
        echo "AWS Region: ${{ env.AWS_REGION }}"
        echo ""
        echo "📊 Prometheus URL: http://${{ steps.get_elb.outputs.ELB_ADDRESS }}/prometheus"
        echo "📈 Grafana URL: http://${{ steps.get_elb.outputs.ELB_ADDRESS }}/grafana"
        echo "🚨 Alertmanager URL: http://${{ steps.get_elb.outputs.ELB_ADDRESS }}/alertmanager"
        echo ""
        echo "🔧 Full ELB Address: ${{ steps.get_elb.outputs.ELB_ADDRESS }}"
        echo ""
        echo "=========================================="

    - name: Verify Access
      run: |
        echo "Testing access to monitoring services..."
        echo "Testing Grafana..."
        curl -s -o /dev/null -w "Grafana HTTP Status: %{http_code}\n" http://${{ steps.get_elb.outputs.ELB_ADDRESS }}/grafana || echo "Grafana not accessible yet"
        
        echo "Testing Prometheus..."
        curl -s -o /dev/null -w "Prometheus HTTP Status: %{http_code}\n" http://${{ steps.get_elb.outputs.ELB_ADDRESS }}/prometheus || echo "Prometheus not accessible yet"
        
        echo "Testing Alertmanager..."
        curl -s -o /dev/null -w "Alertmanager HTTP Status: %{http_code}\n" http://${{ steps.get_elb.outputs.ELB_ADDRESS }}/alertmanager || echo "Alertmanager not accessible yet"

    - name: Show Ingress Details
      run: |
        echo "=== Ingress Details ==="
        kubectl get ingress -n monitoring -o wide
        echo ""
        echo "=== Services Details ==="
        kubectl get services -n monitoring