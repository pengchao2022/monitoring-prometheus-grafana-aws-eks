name: Deploy Monitoring Stack with ALB

on:
  push:
    branches: [ main, master ]
    paths:
      - 'charts/**'
      - 'kubernetes/**'
      - '.github/workflows/deploy-monitoring.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  NAMESPACE: monitoring

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name ${{ env.CLUSTER_NAME }}

    - name: Setup kubectl and Helm
      run: |
        # 安装 kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # 安装 Helm
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        
        # 验证安装
        kubectl version --client
        helm version

    - name: Pre-deployment cluster check
      run: |
        echo "🔍 Pre-deployment Cluster Diagnostics"
        echo "====================================="
        
        # 检查节点状态
        echo "=== Node Status ==="
        kubectl get nodes -o wide
        
        # 检查节点资源
        echo "=== Node Resources ==="
        kubectl top nodes 2>/dev/null || echo "Metrics server not available"
        
        # 检查存储类
        echo "=== Storage Classes ==="
        kubectl get storageclass
        
        # 检查现有命名空间
        echo "=== Existing Monitoring Namespace ==="
        kubectl get namespace ${{ env.NAMESPACE }} || echo "Namespace does not exist yet"

    - name: Verify AWS Load Balancer Controller
      run: |
        echo "🔍 Checking existing AWS Load Balancer Controller..."
        kubectl get pods -A | grep aws-load-balancer-controller || echo "❌ AWS Load Balancer Controller not found"

    - name: Create monitoring namespace
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Create Grafana secret
      run: |
        kubectl create secret generic grafana-admin-secret \
          --namespace=${{ env.NAMESPACE }} \
          --from-literal=admin-user=${{ secrets.GRAFANA_ADMIN_USER }} \
          --from-literal=admin-password=${{ secrets.GRAFANA_ADMIN_PASSWORD }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Add Helm repositories
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update

    - name: Deploy kube-prometheus-stack with timeout
      id: helm-deploy
      run: |
        echo "🚀 Starting kube-prometheus-stack installation..."
        echo "Start time: $(date)"
        
        # 设置安装超时和重试逻辑
        max_attempts=3
        attempt=1
        success=false
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts..."
          
          if helm upgrade --install kube-prometheus-stack \
            prometheus-community/kube-prometheus-stack \
            --namespace ${{ env.NAMESPACE }} \
            --version 48.1.1 \
            --values charts/kube-prometheus-stack/values-alb.yaml \
            --wait \
            --timeout 15m \
            --atomic \
            --create-namespace; then
            
            echo "✅ Helm installation successful on attempt $attempt"
            success=true
            break
          else
            echo "❌ Helm installation failed on attempt $attempt"
            if [ $attempt -lt $max_attempts ]; then
              echo "Waiting 30 seconds before retry..."
              sleep 30
            fi
          fi
          attempt=$((attempt + 1))
        done
        
        if [ "$success" = true ]; then
          echo "helm_status=success" >> $GITHUB_OUTPUT
        else
          echo "helm_status=failed" >> $GITHUB_OUTPUT
        fi
        
        echo "Completion time: $(date)"

    - name: Real-time installation monitoring
      if: always()
      run: |
        echo "📊 Real-time Installation Monitoring"
        echo "==================================="
        
        # 持续监控 Pod 状态
        for i in {1..6}; do
          echo "--- Status check $i --- $(date)"
          echo "Pods:"
          kubectl get pods -n ${{ env.NAMESPACE }} --sort-by=.status.startTime | head -10
          
          echo "Events:"
          kubectl get events -n ${{ env.NAMESPACE }} --sort-by=.lastTimestamp --field-selector type=Warning 2>/dev/null | tail -3 || echo "No warning events"
          
          if [ $i -lt 6 ]; then
            sleep 20
          fi
        done

    - name: Post-installation diagnostics
      if: always()
      run: |
        echo "🔍 Post-installation Diagnostics"
        echo "================================"
        
        # 检查 Helm release 状态
        echo "=== Helm Release Status ==="
        helm list -n ${{ env.NAMESPACE }} || echo "Helm release not found"
        
        # 详细 Pod 诊断
        echo "=== Detailed Pod Diagnostics ==="
        kubectl get pods -n ${{ env.NAMESPACE }} -o wide
        
        # 检查 Pod 详细状态
        for pod in $(kubectl get pods -n ${{ env.NAMESPACE }} --no-headers -o custom-columns=":metadata.name"); do
          echo "--- Diagnosing pod: $pod ---"
          kubectl describe pod $pod -n ${{ env.NAMESPACE }} | grep -A 10 "Events:" || echo "No events found"
        done
        
        # 检查 PVC 状态
        echo "=== PVC Status ==="
        kubectl get pvc -n ${{ env.NAMESPACE }} -o wide 2>/dev/null || echo "No PVCs found"
        
        # 检查服务状态
        echo "=== Service Status ==="
        kubectl get services -n ${{ env.NAMESPACE }}
        
        # 检查最近的事件
        echo "=== Recent Events (last 15) ==="
        kubectl get events -n ${{ env.NAMESPACE }} --sort-by=.lastTimestamp | tail -15

    - name: Deploy Ingress resources
      if: steps.helm-deploy.outputs.helm_status == 'success'
      run: |
        echo "🚀 Deploying Ingress resources..."
        kubectl apply -f kubernetes/ingress/ -n ${{ env.NAMESPACE }}

    - name: Wait for ALB provisioning
      if: steps.helm-deploy.outputs.helm_status == 'success'
      run: |
        echo "⏳ Waiting for ALB provisioning..."
        
        # 等待 ALB 创建，带超时
        max_wait=300
        wait_time=0
        alb_provisioned=false
        
        while [ $wait_time -lt $max_wait ]; do
          ALB_HOSTNAME=$(kubectl get ingress grafana-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
          if [ -n "$ALB_HOSTNAME" ]; then
            echo "✅ ALB provisioned: $ALB_HOSTNAME"
            alb_provisioned=true
            break
          fi
          echo "Waiting for ALB... (elapsed: ${wait_time}s)"
          sleep 30
          wait_time=$((wait_time + 30))
        done
        
        if [ "$alb_provisioned" = false ]; then
          echo "❌ ALB provisioning timeout after ${max_wait}s"
        fi
        
        echo "ALB Status:"
        kubectl get ingress -n ${{ env.NAMESPACE }}

    - name: Final health check
      if: steps.helm-deploy.outputs.helm_status == 'success'
      run: |
        echo "🏥 Running final health check..."
        chmod +x scripts/health-check.sh
        ./scripts/health-check.sh

    - name: Get ALB endpoints
      if: steps.helm-deploy.outputs.helm_status == 'success'
      id: endpoints
      run: |
        GRAFANA_ALB=$(kubectl get ingress grafana-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "pending")
        PROMETHEUS_ALB=$(kubectl get ingress prometheus-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "pending")
        ALERTMANAGER_ALB=$(kubectl get ingress alertmanager-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "pending")
        
        echo "grafana_alb=$GRAFANA_ALB" >> $GITHUB_OUTPUT
        echo "prometheus_alb=$PROMETHEUS_ALB" >> $GITHUB_OUTPUT
        echo "alertmanager_alb=$ALERTMANAGER_ALB" >> $GITHUB_OUTPUT
        
        echo "Grafana ALB: $GRAFANA_ALB"
        echo "Prometheus ALB: $PROMETHEUS_ALB"
        echo "Alertmanager ALB: $ALERTMANAGER_ALB"

    - name: Create deployment summary
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const helmStatus = '${{ steps.helm-deploy.outputs.helm_status }}';
          const grafanaAlb = '${{ steps.endpoints.outputs.grafana_alb }}';
          const prometheusAlb = '${{ steps.endpoints.outputs.prometheus_alb }}';
          const alertmanagerAlb = '${{ steps.endpoints.outputs.alertmanager_alb }}';
          
          let statusMessage = '';
          let details = '';
          
          if (helmStatus === 'success') {
            statusMessage = '🎉 Monitoring Stack with ALB 部署完成!';
            details = `**ALB 访问地址:**\n- 📊 Grafana: http://${grafanaAlb}\n- 📈 Prometheus: http://${prometheusAlb}\n- 🚨 Alertmanager: http://${alertmanagerAlb}\n\n**登录信息:**\n- Grafana 用户名: \`${{ secrets.GRAFANA_ADMIN_USER }}\`\n- Grafana 密码: \`${{ secrets.GRAFANA_ADMIN_PASSWORD }}\``;
          } else {
            statusMessage = '❌ Monitoring Stack 部署失败';
            details = 'Helm 安装过程中出现错误。请检查 GitHub Actions 日志了解具体原因。';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${statusMessage}\n\n${details}`
          });