name: Deploy Monitoring Stack to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

    - name: Deploy Monitoring Stack
      run: |
        kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
        echo "Deployed monitoring stack"

    - name: Wait for ALB
      run: |
        echo "Waiting for ALB to be ready..."
        for i in {1..30}; do
          if kubectl get ingress -n monitoring &>/dev/null; then
            ELB_EXISTS=$(kubectl get ingress -n monitoring -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "not-ready")
            if [[ "$ELB_EXISTS" != "not-ready" ]] && [[ -n "$ELB_EXISTS" ]]; then
              echo "ALB is ready!"
              break
            fi
          fi
          echo "Waiting... ($i/30)"
          sleep 10
        done

    - name: Create Access Info Files
      run: |
        # 获取ELB地址
        ELB_ADDRESS=$(kubectl get ingress -n monitoring -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
        
        # 创建详细的访问信息文件
        cat > ACCESS_INFO.md << EOF
        # Monitoring Stack Access Information
        
        ## ELB Address
        $ELB_ADDRESS
        
        ## Access URLs
        - Prometheus: http://$ELB_ADDRESS/prometheus
        - Grafana: http://$ELB_ADDRESS/grafana  
        - Alertmanager: http://$ELB_ADDRESS/alertmanager
        
        ## Quick Access Commands
        \`\`\`bash
        # Test Grafana access
        curl -v http://$ELB_ADDRESS/grafana
        
        # Test Prometheus access  
        curl -v http://$ELB_ADDRESS/prometheus
        
        # Get ELB address (if needed again)
        kubectl get ingress -n monitoring -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}'
        \`\`\`
        
        ## Deployment Info
        - Cluster: ${{ env.CLUSTER_NAME }}
        - Region: ${{ env.AWS_REGION }}
        - Timestamp: $(date)
        EOF
        
        # 创建简单的环境变量文件
        cat > urls.txt << EOF
        ELB_ADDRESS=$ELB_ADDRESS
        PROMETHEUS_URL=http://$ELB_ADDRESS/prometheus
        GRAFANA_URL=http://$ELB_ADDRESS/grafana
        ALERTMANAGER_URL=http://$ELB_ADDRESS/alertmanager
        EOF
        
        echo "Access information files created"

    - name: Upload Access Info as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-access-info
        path: |
          ACCESS_INFO.md
          urls.txt
        retention-days: 30

    - name: Final Instructions
      run: |
        echo "=========================================="
        echo "✅ DEPLOYMENT COMPLETE"
        echo "=========================================="
        echo ""
        echo "📥 DOWNLOAD ACCESS INFORMATION:"
        echo "1. Go to this workflow run in GitHub"
        echo "2. Scroll down to the 'Artifacts' section"  
        echo "3. Download 'monitoring-access-info'"
        echo "4. Open ACCESS_INFO.md for complete details"
        echo ""
        echo "🔗 ALTERNATIVE: Get ELB address locally with:"
        echo "kubectl get ingress -n monitoring -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}'"
        echo ""
        echo "🌐 ACCESS YOUR DASHBOARDS:"
        echo "After getting the ELB address, use:"
        echo "- /grafana for Grafana"
        echo "- /prometheus for Prometheus" 
        echo "- /alertmanager for Alertmanager"
        echo ""
        echo "=========================================="