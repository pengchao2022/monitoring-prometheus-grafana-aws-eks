name: Deploy Monitoring Stack to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

    - name: Deploy Monitoring Stack
      run: |
        kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
        echo "Deployed monitoring stack"

    - name: Get ELB Address with Obfuscation
      id: get_elb
      run: |
        # 等待ALB创建
        sleep 60
        
        # 方法1: 使用base64编码
        ELB_RAW=$(kubectl get ingress -n monitoring -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
        ELB_B64=$(echo -n "$ELB_RAW" | base64 -w0)
        echo "ELB_B64=$ELB_B64" >> $GITHUB_OUTPUT
        echo "Raw ELB (will be hidden): $ELB_RAW"
        
        # 方法2: 分割输出
        ELB_PART1=$(echo "$ELB_RAW" | cut -d'.' -f1)
        ELB_PART2=$(echo "$ELB_RAW" | cut -d'.' -f2-)
        echo "ELB_PART1=$ELB_PART1" >> $GITHUB_OUTPUT
        echo "ELB_PART2=$ELB_PART2" >> $GITHUB_OUTPUT
        
        # 方法3: 反向输出
        ELB_REV=$(echo "$ELB_RAW" | rev)
        echo "ELB_REV=$ELB_REV" >> $GITHUB_OUTPUT

    - name: Decode and Output URLs
      run: |
        # 解码base64
        ELB_FULL=$(echo "${{ steps.get_elb.outputs.ELB_B64 }}" | base64 -d)
        
        # 或者组合分割的部分
        ELB_COMBINED="${{ steps.get_elb.outputs.ELB_PART1 }}.${{ steps.get_elb.outputs.ELB_PART2 }}"
        
        # 或者反转回来
        ELB_NORMAL=$(echo "${{ steps.get_elb.outputs.ELB_REV }}" | rev)
        
        echo "=========================================="
        echo "🚀 Monitoring Stack Deployment Complete!"
        echo "=========================================="
        echo ""
        echo "Method 1 - Base64 Decoded:"
        echo "Full ELB: $ELB_FULL"
        echo "Prometheus: http://$ELB_FULL/prometheus"
        echo "Grafana: http://$ELB_FULL/grafana"
        echo "Alertmanager: http://$ELB_FULL/alertmanager"
        echo ""
        echo "Method 2 - Combined:"
        echo "Full ELB: $ELB_COMBINED"
        echo "Prometheus: http://$ELB_COMBINED/prometheus"
        echo "Grafana: http://$ELB_COMBINED/grafana"
        echo "Alertmanager: http://$ELB_COMBINED/alertmanager"
        echo ""
        echo "Method 3 - Reversed:"
        echo "Full ELB: $ELB_NORMAL"
        echo "Prometheus: http://$ELB_NORMAL/prometheus"
        echo "Grafana: http://$ELB_NORMAL/grafana"
        echo "Alertmanager: http://$ELB_NORMAL/alertmanager"