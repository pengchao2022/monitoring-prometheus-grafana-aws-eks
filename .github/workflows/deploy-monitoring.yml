name: Deploy Monitoring Stack

on:
  push:
    branches: [main]
    paths:
      - '**'  # 监控所有文件变化
  workflow_dispatch:

env:
  CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  NAMESPACE: monitoring

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: AWS Setup
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Tools
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Deploy kube-prometheus-stack
        run: |
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic grafana-admin-secret --namespace=$NAMESPACE --from-literal=admin-user=${{ secrets.GRAFANA_ADMIN_USER }} --from-literal=admin-password=${{ secrets.GRAFANA_ADMIN_PASSWORD }} --dry-run=client -o yaml | kubectl apply -f -
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack --namespace $NAMESPACE --values charts/kube-prometheus-stack/values-alb.yaml --create-namespace

      - name: Simple Fix
        run: |
          sleep 30
          kubectl delete daemonset kube-prometheus-stack-prometheus-node-exporter -n monitoring --ignore-not-found=true
          echo "Deleted old node-exporter"

      - name: Deploy Ingress Resources
        run: |
          echo "Deploying monitoring ingress resources..."
          kubectl apply -f kubernetes/ingress/

      - name: Wait for ALB Provisioning
        run: |
          echo "Waiting for ALB to be provisioned..."
          sleep 60
          
          # Wait for Prometheus ALB
          echo "Waiting for Prometheus ALB..."
          for i in {1..30}; do
            PROMETHEUS_HOSTNAME=$(kubectl get ingress prometheus-ingress -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$PROMETHEUS_HOSTNAME" ]; then
              echo "prometheus_alb_url=http://$PROMETHEUS_HOSTNAME" >> $GITHUB_ENV
              break
            fi
            echo "Attempt $i: Prometheus ALB not ready yet..."
            sleep 10
          done
          
          # Wait for Grafana ALB
          echo "Waiting for Grafana ALB..."
          for i in {1..30}; do
            GRAFANA_HOSTNAME=$(kubectl get ingress grafana-ingress -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$GRAFANA_HOSTNAME" ]; then
              echo "grafana_alb_url=http://$GRAFANA_HOSTNAME" >> $GITHUB_ENV
              break
            fi
            echo "Attempt $i: Grafana ALB not ready yet..."
            sleep 10
          done
          
          # Wait for Alertmanager ALB
          echo "Waiting for Alertmanager ALB..."
          for i in {1..30}; do
            ALERTMANAGER_HOSTNAME=$(kubectl get ingress alertmanager-ingress -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$ALERTMANAGER_HOSTNAME" ]; then
              echo "alertmanager_alb_url=http://$ALERTMANAGER_HOSTNAME" >> $GITHUB_ENV
              break
            fi
            echo "Attempt $i: Alertmanager ALB not ready yet..."
            sleep 10
          done

      - name: Check Result
        run: |
          echo "=== All Pods ==="
          kubectl get pods -n monitoring
          
          echo "=== Services ==="
          kubectl get services -n monitoring
          
          echo "=== Ingresses ==="
          kubectl get ingress -n monitoring

      - name: Output ALB URLs
        run: |
          echo "================================================"
          echo "🚀 Monitoring Stack Deployed Successfully!"
          echo "================================================"
          echo "📊 Prometheus URL: ${{ env.prometheus_alb_url }}"
          echo ""
          echo "📈 Grafana URL: ${{ env.grafana_alb_url }}"
          echo ""
          echo "🚨 Alertmanager URL: ${{ env.alertmanager_alb_url }}"
          echo ""
          echo "🔑 Grafana Credentials:"
          echo "   Username: ${{ secrets.GRAFANA_ADMIN_USER }}"
          echo "   Password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}"
          echo "================================================"