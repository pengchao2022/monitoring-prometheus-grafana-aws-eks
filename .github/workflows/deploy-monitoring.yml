name: Deploy Monitoring Stack to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  GRAFANA_ADMIN_USER: ${{ secrets.GRAFANA_ADMIN_USER }}
  GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

permissions:
  id-token: write
  contents: read

jobs:
  Deploy-Prometheus-Grafana-Helm:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up kubectl and helm
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

    - name: Clean up existing resources
      run: |
        helm uninstall kube-prometheus-stack -n monitoring --ignore-not-found=true
        kubectl delete job kube-prometheus-stack-admission-patch -n monitoring --ignore-not-found=true
        kubectl delete secret kube-prometheus-stack-grafana -n monitoring --ignore-not-found=true
        kubectl delete pvc kube-prometheus-stack-grafana -n monitoring --ignore-not-found=true

    - name: Create monitoring namespace
      run: |
        kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

    - name: Create missing ServiceAccount
      run: |
        kubectl apply -f kubernetes/serviceaccount/admission-serviceaccount.yaml -n monitoring

    - name: Add prometheus-community helm repository
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update

    - name: Debug GitHub Secrets
      run: |
        echo "=== 调试 GitHub Secrets ==="
        echo "GRAFANA_ADMIN_USER: $GRAFANA_ADMIN_USER"
        echo "GRAFANA_ADMIN_PASSWORD 长度: ${#GRAFANA_ADMIN_PASSWORD}"

    - name: Install kube-prometheus-stack with custom values
      run: |
        # 使用环境变量中的 GitHub Secrets
        if [ -f "charts/kube-prometheus-stack/values-alb.yaml" ]; then
          helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
            -n monitoring \
            --create-namespace \
            -f charts/kube-prometheus-stack/values-alb.yaml \
            --set nodeExporter.enabled=false \
            --set grafana.admin.user="$GRAFANA_ADMIN_USER" \
            --set grafana.admin.password="$GRAFANA_ADMIN_PASSWORD" \
            --set grafana.admin.existingSecret=""
        else
          helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
            -n monitoring \
            --create-namespace \
            --set nodeExporter.enabled=false \
            --set grafana.admin.user="$GRAFANA_ADMIN_USER" \
            --set grafana.admin.password="$GRAFANA_ADMIN_PASSWORD" \
            --set grafana.admin.existingSecret=""
        fi

    - name: Verify installation and credentials
      run: |
        echo "=== 等待 Grafana 启动 ==="
        sleep 60
        
        echo "=== 检查 Grafana Pod 状态 ==="
        kubectl get pods -n monitoring -l app.kubernetes.io/name=grafana
        
        echo "=== 检查 Grafana Secret ==="
        if kubectl get secret kube-prometheus-stack-grafana -n monitoring &> /dev/null; then
          echo "✅ Grafana Secret 存在"
          
          echo "=== 验证凭据 ==="
          USERNAME=$(kubectl get secret kube-prometheus-stack-grafana -n monitoring -o jsonpath='{.data.admin-user}' | base64 --decode)
          PASSWORD=$(kubectl get secret kube-prometheus-stack-grafana -n monitoring -o jsonpath='{.data.admin-password}' | base64 --decode)
          
          echo "Secret 中的用户名: $USERNAME"
          echo "Secret 中的密码: [已隐藏]"
          echo "期望的用户名: $GRAFANA_ADMIN_USER"
          
          # 验证凭据是否匹配
          if [ "$USERNAME" = "$GRAFANA_ADMIN_USER" ]; then
            echo "✅ 用户名匹配成功"
          else
            echo "❌ 用户名不匹配"
            echo "期望: $GRAFANA_ADMIN_USER"
            echo "实际: $USERNAME"
          fi
        else
          echo "❌ Grafana Secret 不存在"
          exit 1
        fi

    - name: Clean up existing Node Exporter
      run: |
        kubectl delete daemonset kube-prometheus-stack-prometheus-node-exporter -n monitoring --ignore-not-found=true
        kubectl delete pod -n monitoring -l app.kubernetes.io/name=prometheus-node-exporter --ignore-not-found=true
        kubectl delete daemonset node-exporter-limited -n monitoring --ignore-not-found=true

    - name: Deploy Node Exporter ServiceAccount and RBAC
      run: |
        kubectl apply -f kubernetes/serviceaccount/node-exporter-serviceaccount.yaml -n monitoring

    - name: Deploy custom Node Exporter
      run: |
        kubectl apply -f kubernetes/node-exporter/daemonset-limited.yaml -n monitoring

    - name: Wait for Node Exporter to be ready
      run: |
        sleep 30
        echo "Checking Node Exporter status..."
        kubectl get daemonset node-exporter-limited -n monitoring
        kubectl get pods -n monitoring -l app.kubernetes.io/name=node-exporter -o wide

    - name: Deploy additional Kubernetes manifests
      run: |
        if [ -f "kubernetes/network-policies/monitoring-network-policy.yaml" ]; then
          kubectl apply -f kubernetes/network-policies/monitoring-network-policy.yaml -n monitoring || true
        fi
        kubectl apply -f kubernetes/ingress/ -n monitoring

    - name: Wait for ALB and get address
      id: get_elb
      run: |
        sleep 60
        ELB_ADDRESS=$(kubectl get ingress -n monitoring -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
        if [ -z "$ELB_ADDRESS" ]; then
          sleep 30
          ELB_ADDRESS=$(kubectl get ingress -n monitoring -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
        fi
        echo "ELB_ADDRESS=$ELB_ADDRESS" >> $GITHUB_OUTPUT

    - name: Configure Grafana for subpath support
      run: |
        ELB_ADDRESS="${{ steps.get_elb.outputs.ELB_ADDRESS }}"
        if [ -n "$ELB_ADDRESS" ]; then
          kubectl patch configmap kube-prometheus-stack-grafana -n monitoring --type=merge \
            --patch '{"data":{"grafana.ini":"[server]\ndomain = '"$ELB_ADDRESS"'\nroot_url = http://'"$ELB_ADDRESS"'/grafana/\nserve_from_sub_path = true\n"}}'
          kubectl rollout restart deployment kube-prometheus-stack-grafana -n monitoring
          sleep 60
        fi

    - name: Update Prometheus and Alertmanager external URLs
      run: |
        ELB_ADDRESS="${{ steps.get_elb.outputs.ELB_ADDRESS }}"
        if [ -n "$ELB_ADDRESS" ]; then
          kubectl get prometheus kube-prometheus-stack-prometheus -n monitoring && \
          kubectl patch prometheus kube-prometheus-stack-prometheus -n monitoring --type='merge' \
            -p='{"spec":{"externalUrl":"http://'$ELB_ADDRESS'/prometheus","routePrefix":"/prometheus"}}' || true
          kubectl get alertmanager kube-prometheus-stack-alertmanager -n monitoring && \
          kubectl patch alertmanager kube-prometheus-stack-alertmanager -n monitoring --type='merge' \
            -p='{"spec":{"externalUrl":"http://'$ELB_ADDRESS'/alertmanager","routePrefix":"/alertmanager"}}' || true
        fi

    - name: Restart monitoring services
      run: |
        kubectl delete pod -n monitoring -l app.kubernetes.io/name=prometheus --ignore-not-found=true || true
        kubectl delete pod -n monitoring -l app.kubernetes.io/name=alertmanager --ignore-not-found=true || true
        sleep 30

    - name: Output access information
      run: |
        echo "=========================================="
        echo "🚀 Deployment Finished"
        echo "=========================================="
        echo ""
        echo "EKS Cluster: ${{ env.CLUSTER_NAME }}"
        echo "AWS Region: ${{ env.AWS_REGION }}"
        echo ""
        echo "📊 Prometheus: http://${{ steps.get_elb.outputs.ELB_ADDRESS }}/prometheus"
        echo "📈 Grafana: http://${{ steps.get_elb.outputs.ELB_ADDRESS }}/grafana"
        echo "🚨 Alertmanager: http://${{ steps.get_elb.outputs.ELB_ADDRESS }}/alertmanager"
        echo ""
        echo "Grafana登录凭据:"
        echo "用户名: $GRAFANA_ADMIN_USER"
        echo "密码: 请查看 GitHub Secrets 中的 GRAFANA_ADMIN_PASSWORD"
        echo ""
        echo "Node Exporter Status:"
        kubectl get pods -n monitoring -l app.kubernetes.io/name=node-exporter