# 全局配置
global:
  imagePullSecrets: []

# Grafana 配置
grafana:
  enabled: true
  replicaCount: 1
  deploymentStrategy:
    type: Recreate
  
  # 优化镜像配置
  image:
    repository: grafana/grafana
    tag: "9.5.2"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  ingress:
    enabled: false
  
  # 启用持久化以保存配置和数据
  persistence:
    enabled: true
    type: pvc
    size: 10Gi
    accessModes: 
      - ReadWriteOnce
    storageClassName: gp2
  
  # 关键修改：禁用sidecar自动加载数据源和仪表板
  sidecar:
    dashboards:
      enabled: false  # 改为 false
    datasources:
      enabled: false  # 改为 false
  
  # 预配置数据源
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090
        access: proxy
        isDefault: true
  
  # 预配置仪表板
  dashboards:
    default:
      kubernetes-cluster-monitoring:
        gnetId: 3119
        revision: 1
        datasource: Prometheus
      node-monitoring:
        gnetId: 6417
        revision: 1  
        datasource: Prometheus
      kubernetes-pod-monitoring:
        gnetId: 315
        revision: 1
        datasource: Prometheus
  
  # 大幅减少资源请求
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "400m"

# Prometheus 配置 - 最小化资源
prometheus:
  enabled: true
  
  service:
    type: ClusterIP
    port: 9090
    targetPort: 9090
  
  ingress:
    enabled: false
  
  prometheusSpec:
    # 优化配置
    scrapeInterval: 60s
    evaluationInterval: 60s
    retention: 1d        # 进一步减少保留时间
    retentionSize: "2GB" # 进一步减少存储大小
    
    # 减少副本数
    replicas: 1
    
    # 启用持久化存储
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
    
    # 大幅减少资源请求
    resources:
      requests:
        memory: "256Mi"
        cpu: "200m"
      limits:
        memory: "512Mi"
        cpu: "250m"
    
    # 简化服务发现
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}

# Alertmanager 配置 - 最小化资源
alertmanager:
  enabled: true
  
  service:
    type: ClusterIP
    port: 9093
    targetPort: 9093
  
  ingress:
    enabled: false
  
  alertmanagerSpec:
    # 减少副本数
    replicas: 1
    
    # 启用持久化存储
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
    
    # 大幅减少资源请求
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "200m"

# 禁用非核心组件以加快部署
kubeEtcd:
  enabled: false

kubeControllerManager:
  enabled: false

kubeScheduler:
  enabled: false

kubeProxy:
  enabled: false

# 核心监控组件（保持启用）
kubeApiServer:
  enabled: true

kubelet:
  enabled: true

coreDns:
  enabled: true

kubeStateMetrics:
  enabled: true
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"

# Node Exporter 配置 - 关键：确保节点选择器在 CICD 中生效
nodeExporter:
  enabled: true
  
  # 使用节点选择器限制在特定节点上运行 - 确保这个配置生效
  nodeSelector:
    monitoring: "true"
    kubernetes.io/os: linux
  
  # 容忍所有污点，确保能在标记的节点上调度
  tolerations:
    - operator: "Exists"
  
  # 优化资源请求
  resources:
    requests:
      memory: "64Mi"
      cpu: "100m"
    limits:
      memory: "128Mi"
      cpu: "125m"

# 默认规则 - 重新启用节点相关规则
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubelet: true
    node: true
    prometheus: true
    nodeExporter: true
    nodeExporterRecording: true
    nodeExporterAlerting: true

# Operator 配置 - 修复 TLS secret 问题
prometheusOperator:
  resources:
    requests:
      memory: "64Mi"
      cpu: "100m"
    limits:
      memory: "128Mi"
      cpu: "200m"

  # 启用 admission webhook 以解决 TLS secret 问题
  admissionWebhooks:
    enabled: false
    # 禁用失败策略，避免 webhook 问题阻塞部署
    failurePolicy: Ignore
    # 减少资源请求
    patch:
      enabled: true
      resources:
        requests:
          memory: "64Mi"
          cpu: "100m"
        limits:
          memory: "128Mi"
          cpu: "250m"

# 额外配置 - 确保节点选择器生效
extraObjects: []