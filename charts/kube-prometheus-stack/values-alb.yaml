# 优化版本 - 加快部署速度
# kube-prometheus-stack values for ALB integration

# 全局配置
global:
  imagePullSecrets: []

# Grafana 配置
grafana:
  enabled: true
  admin:
    existingSecret: "grafana-admin-secret"
    userKey: "admin-user"
    passwordKey: "admin-password"
  
  # 优化镜像配置
  image:
    repository: grafana/grafana
    tag: "9.5.2"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  ingress:
    enabled: false
  
  # 首次部署禁用持久化以加快启动
  persistence:
    enabled: false
  
  # 禁用 sidecar 以加快启动
  sidecar:
    dashboards:
      enabled: false
    datasources:
      enabled: false
  
  # 优化资源请求
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

# Prometheus 配置
prometheus:
  enabled: true
  
  service:
    type: ClusterIP
    port: 9090
    targetPort: 9090
  
  ingress:
    enabled: false
  
  prometheusSpec:
    # 优化配置
    scrapeInterval: 60s
    evaluationInterval: 60s
    retention: 2d
    retentionSize: "5GB"
    
    # 减少副本数
    replicas: 1
    
    # 首次部署禁用持久化
    storageSpec: {}
    
    # 优化资源请求
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
    
    # 简化服务发现
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}

# Alertmanager 配置
alertmanager:
  enabled: true
  
  service:
    type: ClusterIP
    port: 9093
    targetPort: 9093
  
  ingress:
    enabled: false
  
  alertmanagerSpec:
    # 减少副本数
    replicas: 1
    
    # 禁用持久化
    storage: {}
    
    # 优化资源请求
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "250m"

# 禁用非核心组件以加快部署
kubeEtcd:
  enabled: false

kubeControllerManager:
  enabled: false

kubeScheduler:
  enabled: false

kubeProxy:
  enabled: false

# 核心监控组件（保持启用）
kubeApiServer:
  enabled: true

kubelet:
  enabled: true

coreDns:
  enabled: true

kubeStateMetrics:
  enabled: true
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"

# Node Exporter 配置 - 只在有 monitoring=true 标签的节点上运行
nodeExporter:
  enabled: true
  
  # 使用节点选择器限制在特定节点上运行
  nodeSelector:
    monitoring: "true"
    kubernetes.io/os: linux
  
  # 容忍所有污点，确保能在标记的节点上调度
  tolerations:
    - operator: "Exists"
  
  # 优化资源请求
  resources:
    requests:
      memory: "32Mi"
      cpu: "20m"
    limits:
      memory: "64Mi"
      cpu: "50m"

# 默认规则 - 重新启用节点相关规则
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubelet: true
    node: true  # 重新启用节点相关规则
    prometheus: true
    nodeExporter: true  # 重新启用 node-exporter 规则
    nodeExporterRecording: true
    nodeExporterAlerting: true

# Operator 配置 - 修复 TLS secret 问题
prometheusOperator:
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "300m"
  
  # 优化镜像配置
  image:
    repository: prometheus-operator/prometheus-operator
    tag: "v0.68.0"
    pullPolicy: IfNotPresent

  # 启用 admission webhook 以解决 TLS secret 问题
  admissionWebhooks:
    enabled: true
    # 禁用失败策略，避免 webhook 问题阻塞部署
    failurePolicy: Ignore
    # 减少资源请求
    patch:
      enabled: true
      resources:
        requests:
          memory: "32Mi"
          cpu: "20m"
        limits:
          memory: "64Mi"
          cpu: "50m"

# 额外配置 - 确保没有残留的 node-exporter 配置
extraObjects: []

# 清理任何可能的残留配置
prometheus-node-exporter:
  enabled: false